#!/bin/bash

mkdir -p /etc/powerdns/pdns.d

# File: /etc/powerdns/pdns.d/pdns.local.gpgsql.conf
cat >/etc/powerdns/pdns.d/pdns.local.gpgsql.conf <<EOF
# PostgreSQL Configuration
#
# Launch gpgsql backend
launch+=gpgsql

# gpgsql parameters
gpgsql-host=$PDNS_PORT_5432_TCP_ADDR
gpgsql-port=$PDNS_PORT_5432_TCP_PORT
gpgsql-dbname=$PDNS_ENV_POSTGRES_USER
gpgsql-user=$PDNS_ENV_POSTGRES_USER
gpgsql-password=$PDNS_ENV_POSTGRES_PASSWORD
gpgsql-dnssec=yes
EOF


mkdir -p /etc/powerdns

cat >/etc/powerdns/pdns.conf <<EOF
launch=gpgsql
EOF


mkdir -p /etc/dbconfig-common

# File: /etc/dbconfig-common/pdns-backend-pgsql.conf
cat >/etc/dbconfig-common/pdns-backend-pgsql.conf <<EOF
# automatically generated by the maintainer scripts of pdns-backend-pgsql
# any changes you make will be preserved, though your comments
# will be lost!  to change your settings you should edit this
# file and then run "dpkg-reconfigure pdns-backend-pgsql"

# dbc_install: configure database with dbconfig-common?
#              set to anything but "true" to opt out of assistance
# dbc_install='true'
dbc_install=''

# dbc_upgrade: upgrade database with dbconfig-common?
#              set to anything but "true" to opt out of assistance
# dbc_upgrade='true'
dbc_upgrade=''

# dbc_remove: deconfigure database with dbconfig-common?
#             set to anything but "true" to opt out of assistance
dbc_remove=''

# dbc_dbtype: type of underlying database to use
# this exists primarily to let dbconfig-common know what database
# type to use when a package supports multiple database types.
# don't change this value unless you know for certain that this
# package supports multiple database types
dbc_dbtype='pgsql'

# dbc_dbuser: database user
# the name of the user who we will use to connect to the database.
dbc_dbuser='$PDNS_ENV_POSTGRES_USER'

# dbc_dbpass: database user password
# the password to use with the above username when connecting
# to a database, if one is required
dbc_dbpass='$PDNS_ENV_POSTGRES_PASSWORD'

# dbc_dbserver: database host.
# leave unset to use localhost (or a more efficient local method
# if it exists).
dbc_dbserver='$PDNS_PORT_5432_TCP_ADDR'

# dbc_dbport: remote database port
# leave unset to use the default.  only applicable if you are
# using a remote database.
dbc_dbport='$PDNS_PORT_5432_TCP_PORT'

# dbc_dbname: name of database
# this is the name of your application's database.
dbc_dbname='$PDNS_ENV_POSTGRES_USER'

# dbc_dbadmin: name of the administrative user
# this is the administrative user that is used to create all of the above
dbc_dbadmin='$PDNS_ENV_POSTGRES_USER'

# dbc_basepath: base directory to hold database files
# leave unset to use the default.  only applicable if you are
# using a local (filesystem based) database.
dbc_basepath=''

##
## postgresql specific settings.  if you don't use postgresql,
## you can safely ignore all of these
##

# dbc_ssl: should we require ssl?
# set to "true" to require that connections use ssl
dbc_ssl=''

# dbc_authmethod_admin: authentication method for admin
# dbc_authmethod_user: authentication method for dbuser
# see the section titled "AUTHENTICATION METHODS" in
# /usr/share/doc/dbconfig-common/README.pgsql for more info
dbc_authmethod_admin='ident'
dbc_authmethod_user='ident'

##
## end postgresql specific settings
##

EOF

# Initialize Database
export PGPASSWORD=$PDNS_ENV_POSTGRES_PASSWORD
psql -h $PDNS_PORT_5432_TCP_ADDR -d $PDNS_ENV_POSTGRES_USER -U $PDNS_ENV_POSTGRES_USER -f /usr/share/doc/pdns-backend-pgsql/schema.pgsql.sql

# Start PowerDNS
/etc/init.d/pdns monitor
# /etc/init.d/pdns start # Daemon mode
